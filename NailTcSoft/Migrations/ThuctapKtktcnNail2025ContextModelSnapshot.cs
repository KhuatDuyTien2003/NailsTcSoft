// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NailTcSoft.Data;

#nullable disable

namespace NailTcSoft.Migrations
{
    [DbContext(typeof(ThuctapKtktcnNail2025Context))]
    partial class ThuctapKtktcnNail2025ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("billId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime")
                        .HasColumnName("billDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<decimal?>("MoneyPoint")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("moneyPoint");

                    b.Property<bool>("PaymentId")
                        .HasColumnType("bit")
                        .HasColumnName("paymentId");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    b.Property<int>("ReceptionistId")
                        .HasColumnType("int")
                        .HasColumnName("receptionistId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.HasKey("BillId")
                        .HasName("PK__Bill__6D903F0377A66880");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("billId");

                    b.Property<int>("ProAndSerId")
                        .HasColumnType("int")
                        .HasColumnName("proAndSerId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id")
                        .HasName("PK__BillDeta__3213E83F71D2C687");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.CalculatePoint", b =>
                {
                    b.Property<int>("CalculateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("calculateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalculateId"));

                    b.Property<bool>("CalulateType")
                        .HasColumnType("bit")
                        .HasColumnName("calulateType");

                    b.Property<int>("Money")
                        .HasColumnType("int")
                        .HasColumnName("money");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("point");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("CalculateId")
                        .HasName("PK__Calculat__E8BD939A9A133C36");

                    b.ToTable("CalculatePoints");
                });

            modelBuilder.Entity("NailTcSoft.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1D8AEA35084");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.ComboDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("comboId");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__ComboDet__3214EC07E48DC2E4");

                    b.ToTable("ComboDetail", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.CommissionPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AccountantId")
                        .HasColumnType("int")
                        .HasColumnName("accountantId");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCommission")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalCommission");

                    b.Property<int>("TotalWork")
                        .HasColumnType("int")
                        .HasColumnName("totalWork");

                    b.HasKey("PaymentId")
                        .HasName("PK__Commissi__A0D9EFC6C1464F3E");

                    b.ToTable("CommissionPayment", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("customerName");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("NumberPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numberPhone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int?>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("rankId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("totalPoints");

                    b.Property<string>("UrlAvatar")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urlAvatar");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__B611CB7D4A9DAF4B");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.CustomerRank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rankId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankId"));

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int")
                        .HasColumnName("discountRate");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rankName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.HasKey("RankId")
                        .HasName("PK__Customer__D639D7010B98D027");

                    b.ToTable("CustomerRank", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int?>("ProAndSerId")
                        .HasColumnType("int")
                        .HasColumnName("proAndSerId");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<double>("Star")
                        .HasColumnType("float")
                        .HasColumnName("star");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD24A8E4A140");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.GoodsReceipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("receiptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"));

                    b.Property<int?>("AccountantId")
                        .HasColumnType("int")
                        .HasColumnName("accountantId");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime")
                        .HasColumnName("importDate");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.HasKey("ReceiptId")
                        .HasName("PK__GoodsRec__CAA7E8B827A0BCC3");

                    b.ToTable("GoodsReceipt", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.GoodsReceiptDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ImportPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("importPrice");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receiptId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("supplier");

                    b.HasKey("Id")
                        .HasName("PK__GoodsRec__3213E83F3C9020E1");

                    b.ToTable("GoodsReceiptDetail", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.ImageFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urlImage");

                    b.HasKey("Id")
                        .HasName("PK__ImageFee__3213E83F06E537D2");

                    b.ToTable("ImageFeedback", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.PriceList", b =>
                {
                    b.Property<int>("PriceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("priceListId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceListId"));

                    b.Property<DateOnly?>("EndTime")
                        .HasColumnType("date")
                        .HasColumnName("endTime");

                    b.Property<string>("PriceListName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("priceListName");

                    b.Property<bool>("PriceListType")
                        .HasColumnType("bit")
                        .HasColumnName("priceListType");

                    b.Property<int?>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("rankId");

                    b.Property<DateOnly?>("StartTime")
                        .HasColumnType("date")
                        .HasColumnName("startTime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("ValuePriceList")
                        .HasColumnType("int")
                        .HasColumnName("valuePriceList");

                    b.HasKey("PriceListId")
                        .HasName("PK__PriceLis__5A789FD2851FFF30");

                    b.ToTable("PriceList", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.PriceListDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PriceListId")
                        .HasColumnType("int")
                        .HasColumnName("priceListId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("sellPrice");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__PriceLis__3213E83FE30EF13B");

                    b.ToTable("PriceListDetail", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.ProductAndService", b =>
                {
                    b.Property<int>("ProAndSerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("proAndSerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProAndSerId"));

                    b.Property<int?>("Commission")
                        .HasColumnType("int")
                        .HasColumnName("commission");

                    b.Property<int?>("InventoryQuantity")
                        .HasColumnType("int")
                        .HasColumnName("inventoryQuantity");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("originalPrice");

                    b.Property<string>("ProAndSerCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("proAndSerCode");

                    b.Property<string>("ProAndSerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("proAndSerName");

                    b.Property<byte>("ProAndSerType")
                        .HasColumnType("tinyint")
                        .HasColumnName("proAndSerType");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("productTypeId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("Unit")
                        .HasColumnType("int")
                        .HasColumnName("unit");

                    b.Property<string>("UrlImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urlImage");

                    b.Property<TimeOnly?>("WorkTime")
                        .HasColumnType("time")
                        .HasColumnName("workTime");

                    b.HasKey("ProAndSerId")
                        .HasName("PK__ProductA__4A1A7779B56E4014");

                    b.HasIndex(new[] { "ProAndSerCode" }, "UQ__ProductA__839A479656AAB0E9")
                        .IsUnique()
                        .HasFilter("[proAndSerCode] IS NOT NULL");

                    b.ToTable("ProductAndService", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("productTypeName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ProductTypeId")
                        .HasName("PK__ProductT__CA28F4DED8EF8227");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<decimal>("Condition")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("condition");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsPoints")
                        .HasColumnType("bit")
                        .HasColumnName("isPoints");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("productTypeId");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("promotionName");

                    b.Property<bool>("PromotionType")
                        .HasColumnType("bit")
                        .HasColumnName("promotionType");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("rankId");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("UrlImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urlImage");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__99EB696E5901E12D");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("isUsed");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("promotionCode");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UsedDate")
                        .HasColumnType("date")
                        .HasColumnName("usedDate");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3213E83F4BBC59EC");

                    b.HasIndex(new[] { "PromotionCode" }, "UQ__Promotio__E9685770A92520FF")
                        .IsUnique();

                    b.ToTable("PromotionDetail", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<DateOnly?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("joinDate");

                    b.Property<string>("NumberPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numberPhone");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("staffName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalMoney");

                    b.Property<double?>("TotalStar")
                        .HasColumnType("float")
                        .HasColumnName("totalStar");

                    b.Property<string>("UrlAvatar")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urlAvatar");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__6465E07E8CA3F912");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("NailTcSoft.Data.StaffService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__StaffSer__3213E83FFD9B92CE");

                    b.ToTable("StaffService", (string)null);
                });

            modelBuilder.Entity("NailTcSoft.Data.WorkSchedule", b =>
                {
                    b.Property<int>("WorkScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("workScheduleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkScheduleId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("isDone");

                    b.Property<byte>("Shift")
                        .HasColumnType("tinyint")
                        .HasColumnName("shift");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("WorkScheduleId")
                        .HasName("PK__WorkSche__8691383837C7322D");

                    b.ToTable("WorkSchedule", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NailTcSoft.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NailTcSoft.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NailTcSoft.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NailTcSoft.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
